
<div class="wrapper">
  <%= form_for(resource, as: resource_name, url: registration_path(resource_name), :html => {:class => "form-signin", id:"signup_form"},) do |f| %>
    <%= devise_error_messages! %>

    <h2 class="form-signin-heading">Sign up</h2>

    <div class="field">
      <%= f.text_field :username, autofocus: true, class: "form-control", placeholder:"username"  %>
      <span id="usernameError"></span>
    </div>

    <div class="field">
      <%= f.text_field :mobile, autofocus: true, class: "form-control", placeholder:"mobilenumber"  %>
      <span id="mobileError"></span>
    </div>

    <div class="field">
      <%= f.collection_select :gender_id, Gender.all, :id, :name, {prompt: "Select Genger"}, {class:"form-control selectpicker"} %><span id="genderError"></span>
    </div>

    <div class="field">
      <%= f.date_field :dob, autofocus: true, class: "form-control" %><span id="dobError"></span>
    </div>


    <div class="field">
      <%= f.email_field :email, autofocus: true, class: "form-control", placeholder:"email"  %><span id="emailError"></span>
    </div>

    <div class="field">
      <% if @minimum_password_length %>
      <em>(<%= @minimum_password_length %> characters minimum)</em>
      <% end %><br />
      <%= f.password_field :password, autocomplete: "off", class: "form-control", placeholder:"password"  %><span id="passwordError"></span>
    </div>

    <div class="field", class:"form-group">
      <%= f.password_field :password_confirmation, autocomplete: "off", class: "form-control", placeholder:"Confirm-password"  %><span id="confirmPasswordError"></span>
    </div><br/>

    <div class="actions">
      <%= f.submit "Sign up", class:"btn btn-lg btn-primary btn-block", id:"signup" %>
    </div>
  <% end %>
</div>

<%#= render "devise/shared/links" %>

<script >

  var numberFormat = /^\d+$/;
  var emailFormat = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  var usernameFormat = /^[a-zA-Z]*$/;

  var usernameHandle = document.getElementById('user_username');
  var mobileHandle = document.getElementById('user_mobile');
  var genderHandle = document.getElementById('user_gender_id');
  var dobHandle = document.getElementById('user_dob');
  var emailHandle = document.getElementById('user_email');
  var passwordHandle = document.getElementById('user_password');
  var confirmPasswordHandle = document.getElementById('user_password_confirmation');
  var formHandle = document.getElementById('signup_form');
  var signupHandle = document.getElementById('signup');

  var usernameErrorHandle = document.getElementById('usernameError');
  var mobileErrorHandle = document.getElementById('mobileError');
  var genderErrorHandle = document.getElementById('genderError');
  var dobErrorHandle = document.getElementById('dobError');
  var emailErrorHandle = document.getElementById('emailError');
  var passwordErrorHandle = document.getElementById('passwordError');
  var confirmPasswordErrorHandle = document.getElementById('confirmPasswordError');

  var validator = {
    usernameValid: false,
    mobileValid: false,
    genderValid: false,
    dobValid: false,
    emailValid: false,
    passwordValid: false,
    confirmPasswordValid: false
  }

  function usernameValidation(){
    if (usernameHandle.value === ""){
      validator.usernameValid = false ;
      usernameErrorHandle.innerHTML = "can't be blank";
    }else if(!usernameFormat.test(usernameHandle.value)){
      usernameErrorHandle.innerHTML = "Should not contain any numbers, special characters";
    }else{
      validator.usernameValid = true;
      usernameErrorHandle.innerHTML = "";
    }
  }

  function mobileValidation(){
    if (mobileHandle.value === ""){
      validator.mobileValid = false;
      mobileErrorHandle.innerHTML = "can't not be blank";
    }else if (!numberFormat.test(mobileHandle.value)){
      mobileErrorHandle.innerHTML = "Should not contain any numbers, special characters";
    }else{
      validator.mobileValid = true;
      mobileErrorHandle.innerHTML = "";
    }
  }

  function genderValidation(){
    if (genderHandle.value === ""){
      validator.genderValid = false;
      genderErrorHandle.innerHTML = "Can't be blank";
    }else{
      validator.genderValid = true;
      genderErrorHandle.innerHTML = "";
    }
  }

  function dobValidation(){
    if (dobHandle.value === ""){
      validator.dobValid = false;
      dobErrorHandle.innerHTML = "Can't be blank";
    }else{
      validator.dobValid = true;
      dobErrorHandle.innerHTML = "";
    }
  }

  function emailValidation(){
    if (emailHandle.value === ""){
      validator.emailValid = false;
      emailErrorHandle.innerHTML = "Can't be blank";
    }else if (!emailFormat.test(emailHandle.value)){
      emailErrorHandle.innerHTML = "Should be like abc@xyz.com";
    }else{
      validator.emailValid = true;
      emailErrorHandle.innerHTML = "";
    }
  }

  function passwordValidation(){
    if (passwordHandle.value === ""){
      validator.passwordValid = false;
      passwordErrorHandle.innerHTML = "Can't be blank";
    }else{
      validator.passwordValid = true;
      passwordErrorHandle.innerHTML = "";
    }
  }

  function confirmPasswordValidation(){
    if (confirmPasswordHandle.value === ""){
      validator.confirmPasswordValid = false;
      confirmPasswordErrorHandle.innerHTML = "Can't be blank";
    }else{
      validator.confirmPasswordValid = true;
      confirmPasswordErrorHandle.innerHTML = "";
    }
  }

  formHandle.addEventListener('submit', function(e){
    console.log("hello");
    usernameValidation();
    mobileValidation();
    genderValidation();
    dobValidation();
    emailValidation();
    passwordValidation();
    confirmPasswordValidation();
    if(Object.values(validator).includes(false)){
      e.preventDefault();
      setTimeout(function(){
        signupHandle.disabled = false;
      },100);
    }else{

    }
  },false);
</script>
